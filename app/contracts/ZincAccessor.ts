/* GENERATED BY TYPECHAIN VER. 0.2.4 */
/* tslint:disable */

import { BigNumber } from "bignumber.js"
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
  DeferredEventWrapper
} from "./typechain-runtime"

export class ZincAccessor extends TypeChainContract {
  public readonly rawWeb3Contract: any

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [
          { name: "_message1", type: "string" },
          { name: "_nonce", type: "uint32" },
          { name: "_header1", type: "string" },
          { name: "_header2", type: "string" },
          { name: "_r", type: "bytes32" },
          { name: "_s", type: "bytes32" },
          { name: "_v", type: "uint8" }
        ],
        name: "checkSignature",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_userAddress", type: "address" },
          { name: "_message1", type: "string" },
          { name: "_nonce", type: "uint32" },
          { name: "_header1", type: "string" },
          { name: "_header2", type: "string" },
          { name: "_r", type: "bytes32" },
          { name: "_s", type: "bytes32" },
          { name: "_v", type: "uint8" }
        ],
        name: "checkUserSignature",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_userAddress", type: "address" },
          { name: "_message1", type: "string" },
          { name: "_nonce", type: "uint32" },
          { name: "_header1", type: "string" },
          { name: "_header2", type: "string" },
          { name: "_r", type: "bytes32" },
          { name: "_s", type: "bytes32" },
          { name: "_v", type: "uint8" }
        ],
        name: "constructUserIdentity",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_key", type: "address" },
          { name: "_idContract", type: "address" },
          { name: "_purpose", type: "uint8" },
          { name: "_userAddress", type: "address" },
          { name: "_message1", type: "string" },
          { name: "_nonce", type: "uint32" },
          { name: "_header1", type: "string" },
          { name: "_header2", type: "string" },
          { name: "_r", type: "bytes32" },
          { name: "_s", type: "bytes32" },
          { name: "_v", type: "uint8" }
        ],
        name: "addAccessor",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_key", type: "address" },
          { name: "_idContract", type: "address" },
          { name: "_userAddress", type: "address" },
          { name: "_message1", type: "string" },
          { name: "_nonce", type: "uint32" },
          { name: "_header1", type: "string" },
          { name: "_header2", type: "string" },
          { name: "_r", type: "bytes32" },
          { name: "_s", type: "bytes32" },
          { name: "_v", type: "uint8" }
        ],
        name: "removeAccessor",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ]
    super(web3, address, abi)
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<ZincAccessor> {
    const contract = new ZincAccessor(web3, address)
    const code = await promisify(web3.eth.getCode, [address])

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`)
    }
    return contract
  }

  public get nonce(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.nonce, [])
  }
  public checkSignature(
    _message1: string,
    _nonce: BigNumber | number,
    _header1: string,
    _header2: string,
    _r: string,
    _s: string,
    _v: BigNumber | number
  ): Promise<string> {
    return promisify(this.rawWeb3Contract.checkSignature, [
      _message1.toString(),
      _nonce.toString(),
      _header1.toString(),
      _header2.toString(),
      _r.toString(),
      _s.toString(),
      _v.toString()
    ])
  }
  public checkUserSignature(
    _userAddress: BigNumber | string,
    _message1: string,
    _nonce: BigNumber | number,
    _header1: string,
    _header2: string,
    _r: string,
    _s: string,
    _v: BigNumber | number
  ): Promise<boolean> {
    return promisify(this.rawWeb3Contract.checkUserSignature, [
      _userAddress.toString(),
      _message1.toString(),
      _nonce.toString(),
      _header1.toString(),
      _header2.toString(),
      _r.toString(),
      _s.toString(),
      _v.toString()
    ])
  }

  public constructUserIdentityTx(
    _userAddress: BigNumber | string,
    _message1: string,
    _nonce: BigNumber | number,
    _header1: string,
    _header2: string,
    _r: string,
    _s: string,
    _v: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "constructUserIdentity",
      [
        _userAddress.toString(),
        _message1.toString(),
        _nonce.toString(),
        _header1.toString(),
        _header2.toString(),
        _r.toString(),
        _s.toString(),
        _v.toString()
      ]
    )
  }
  public addAccessorTx(
    _key: BigNumber | string,
    _idContract: BigNumber | string,
    _purpose: BigNumber | number,
    _userAddress: BigNumber | string,
    _message1: string,
    _nonce: BigNumber | number,
    _header1: string,
    _header2: string,
    _r: string,
    _s: string,
    _v: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "addAccessor", [
      _key.toString(),
      _idContract.toString(),
      _purpose.toString(),
      _userAddress.toString(),
      _message1.toString(),
      _nonce.toString(),
      _header1.toString(),
      _header2.toString(),
      _r.toString(),
      _s.toString(),
      _v.toString()
    ])
  }
  public removeAccessorTx(
    _key: BigNumber | string,
    _idContract: BigNumber | string,
    _userAddress: BigNumber | string,
    _message1: string,
    _nonce: BigNumber | number,
    _header1: string,
    _header2: string,
    _r: string,
    _s: string,
    _v: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "removeAccessor", [
      _key.toString(),
      _idContract.toString(),
      _userAddress.toString(),
      _message1.toString(),
      _nonce.toString(),
      _header1.toString(),
      _header2.toString(),
      _r.toString(),
      _s.toString(),
      _v.toString()
    ])
  }
}
