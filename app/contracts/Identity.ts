/* GENERATED BY TYPECHAIN VER. 0.2.4 */
/* tslint:disable */

import { BigNumber } from "bignumber.js"
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
  DeferredEventWrapper
} from "./typechain-runtime"

export class Identity extends TypeChainContract {
  public readonly rawWeb3Contract: any

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        inputs: [
          { name: "_initialAccessors", type: "address[]" },
          { name: "purposes", type: "uint8[]" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "key", type: "address" },
          { indexed: true, name: "purpose", type: "uint8" }
        ],
        name: "AccessorAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "key", type: "address" },
          { indexed: true, name: "purpose", type: "uint8" }
        ],
        name: "AccessorRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "key", type: "address" },
          { indexed: true, name: "oldPurpose", type: "uint8" },
          { indexed: true, name: "newPurpose", type: "uint8" }
        ],
        name: "AccessorUpdated",
        type: "event"
      },
      {
        constant: true,
        inputs: [{ name: "_key", type: "address" }],
        name: "getAccessorPurpose",
        outputs: [{ name: "", type: "uint8" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_key", type: "address" },
          { name: "_purpose", type: "uint8" }
        ],
        name: "addAccessor",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_key", type: "address" }],
        name: "removeAccessor",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "withdraw",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_amount", type: "uint256" },
          { name: "_account", type: "address" }
        ],
        name: "transferEth",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getBalance",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_token", type: "address" }],
        name: "getTokenBalance",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_token", type: "address" }],
        name: "withdrawTokens",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_to", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "transferTokens",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ]
    super(web3, address, abi)
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Identity> {
    const contract = new Identity(web3, address)
    const code = await promisify(web3.eth.getCode, [address])

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`)
    }
    return contract
  }

  public get getBalance(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getBalance, [])
  }
  public getAccessorPurpose(_key: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getAccessorPurpose, [_key.toString()])
  }
  public getTokenBalance(_token: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getTokenBalance, [_token.toString()])
  }

  public addAccessorTx(
    _key: BigNumber | string,
    _purpose: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "addAccessor", [
      _key.toString(),
      _purpose.toString()
    ])
  }
  public removeAccessorTx(
    _key: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "removeAccessor", [
      _key.toString()
    ])
  }
  public withdrawTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "withdraw", [])
  }
  public transferEthTx(
    _amount: BigNumber | number,
    _account: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "transferEth", [
      _amount.toString(),
      _account.toString()
    ])
  }
  public withdrawTokensTx(
    _token: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "withdrawTokens", [
      _token.toString()
    ])
  }
  public transferTokensTx(
    _token: BigNumber | string,
    _to: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "transferTokens", [
      _token.toString(),
      _to.toString(),
      _amount.toString()
    ])
  }

  public AccessorAddedEvent(eventFilter: {
    key?: BigNumber | string | Array<BigNumber | string>
    purpose?: BigNumber | number | Array<BigNumber | number>
  }): DeferredEventWrapper<
    { key: BigNumber | string; purpose: BigNumber | number },
    {
      key?: BigNumber | string | Array<BigNumber | string>
      purpose?: BigNumber | number | Array<BigNumber | number>
    }
  > {
    return new DeferredEventWrapper<
      { key: BigNumber | string; purpose: BigNumber | number },
      {
        key?: BigNumber | string | Array<BigNumber | string>
        purpose?: BigNumber | number | Array<BigNumber | number>
      }
    >(this, "AccessorAdded", eventFilter)
  }
  public AccessorRemovedEvent(eventFilter: {
    key?: BigNumber | string | Array<BigNumber | string>
    purpose?: BigNumber | number | Array<BigNumber | number>
  }): DeferredEventWrapper<
    { key: BigNumber | string; purpose: BigNumber | number },
    {
      key?: BigNumber | string | Array<BigNumber | string>
      purpose?: BigNumber | number | Array<BigNumber | number>
    }
  > {
    return new DeferredEventWrapper<
      { key: BigNumber | string; purpose: BigNumber | number },
      {
        key?: BigNumber | string | Array<BigNumber | string>
        purpose?: BigNumber | number | Array<BigNumber | number>
      }
    >(this, "AccessorRemoved", eventFilter)
  }
  public AccessorUpdatedEvent(eventFilter: {
    key?: BigNumber | string | Array<BigNumber | string>
    oldPurpose?: BigNumber | number | Array<BigNumber | number>
    newPurpose?: BigNumber | number | Array<BigNumber | number>
  }): DeferredEventWrapper<
    {
      key: BigNumber | string
      oldPurpose: BigNumber | number
      newPurpose: BigNumber | number
    },
    {
      key?: BigNumber | string | Array<BigNumber | string>
      oldPurpose?: BigNumber | number | Array<BigNumber | number>
      newPurpose?: BigNumber | number | Array<BigNumber | number>
    }
  > {
    return new DeferredEventWrapper<
      {
        key: BigNumber | string
        oldPurpose: BigNumber | number
        newPurpose: BigNumber | number
      },
      {
        key?: BigNumber | string | Array<BigNumber | string>
        oldPurpose?: BigNumber | number | Array<BigNumber | number>
        newPurpose?: BigNumber | number | Array<BigNumber | number>
      }
    >(this, "AccessorUpdated", eventFilter)
  }
}
