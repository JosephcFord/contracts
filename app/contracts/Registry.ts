/* GENERATED BY TYPECHAIN VER. 0.2.4 */
/* tslint:disable */

import { BigNumber } from "bignumber.js"
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
  DeferredEventWrapper
} from "./typechain-runtime"

export class Registry extends TypeChainContract {
  public readonly rawWeb3Contract: any

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subject", type: "address" },
          { indexed: true, name: "issuer", type: "address" },
          { indexed: true, name: "id", type: "bytes32" },
          { indexed: false, name: "key", type: "bytes32" },
          { indexed: false, name: "data", type: "bytes32" },
          { indexed: false, name: "updatedAt", type: "uint256" }
        ],
        name: "ClaimSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subject", type: "address" },
          { indexed: true, name: "issuer", type: "address" },
          { indexed: true, name: "id", type: "bytes32" },
          { indexed: false, name: "key", type: "bytes32" },
          { indexed: false, name: "removedAt", type: "uint256" }
        ],
        name: "ClaimRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "previousOwner", type: "address" }],
        name: "OwnershipRenounced",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "subject", type: "address" },
          { name: "issuer", type: "address" },
          { name: "id", type: "bytes32" },
          { name: "key", type: "bytes32" },
          { name: "data", type: "bytes32" }
        ],
        name: "setClaim",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "subject", type: "address" },
          { name: "issuer", type: "address" },
          { name: "id", type: "bytes32" },
          { name: "key", type: "bytes32" }
        ],
        name: "getClaim",
        outputs: [{ name: "", type: "bytes32" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "subject", type: "address" },
          { name: "issuer", type: "address" },
          { name: "id", type: "bytes32" },
          { name: "key", type: "bytes32" }
        ],
        name: "removeClaim",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ]
    super(web3, address, abi)
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Registry> {
    const contract = new Registry(web3, address)
    const code = await promisify(web3.eth.getCode, [address])

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`)
    }
    return contract
  }

  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, [])
  }
  public getClaim(
    subject: BigNumber | string,
    issuer: BigNumber | string,
    id: string,
    key: string
  ): Promise<string> {
    return promisify(this.rawWeb3Contract.getClaim, [
      subject.toString(),
      issuer.toString(),
      id.toString(),
      key.toString()
    ])
  }

  public renounceOwnershipTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "renounceOwnership",
      []
    )
  }
  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    )
  }
  public setClaimTx(
    subject: BigNumber | string,
    issuer: BigNumber | string,
    id: string,
    key: string,
    data: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setClaim", [
      subject.toString(),
      issuer.toString(),
      id.toString(),
      key.toString(),
      data.toString()
    ])
  }
  public removeClaimTx(
    subject: BigNumber | string,
    issuer: BigNumber | string,
    id: string,
    key: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "removeClaim", [
      subject.toString(),
      issuer.toString(),
      id.toString(),
      key.toString()
    ])
  }

  public ClaimSetEvent(eventFilter: {
    subject?: BigNumber | string | Array<BigNumber | string>
    issuer?: BigNumber | string | Array<BigNumber | string>
    id?: string | Array<string>
  }): DeferredEventWrapper<
    {
      subject: BigNumber | string
      issuer: BigNumber | string
      id: string
      key: string
      data: string
      updatedAt: BigNumber | number
    },
    {
      subject?: BigNumber | string | Array<BigNumber | string>
      issuer?: BigNumber | string | Array<BigNumber | string>
      id?: string | Array<string>
    }
  > {
    return new DeferredEventWrapper<
      {
        subject: BigNumber | string
        issuer: BigNumber | string
        id: string
        key: string
        data: string
        updatedAt: BigNumber | number
      },
      {
        subject?: BigNumber | string | Array<BigNumber | string>
        issuer?: BigNumber | string | Array<BigNumber | string>
        id?: string | Array<string>
      }
    >(this, "ClaimSet", eventFilter)
  }
  public ClaimRemovedEvent(eventFilter: {
    subject?: BigNumber | string | Array<BigNumber | string>
    issuer?: BigNumber | string | Array<BigNumber | string>
    id?: string | Array<string>
  }): DeferredEventWrapper<
    {
      subject: BigNumber | string
      issuer: BigNumber | string
      id: string
      key: string
      removedAt: BigNumber | number
    },
    {
      subject?: BigNumber | string | Array<BigNumber | string>
      issuer?: BigNumber | string | Array<BigNumber | string>
      id?: string | Array<string>
    }
  > {
    return new DeferredEventWrapper<
      {
        subject: BigNumber | string
        issuer: BigNumber | string
        id: string
        key: string
        removedAt: BigNumber | number
      },
      {
        subject?: BigNumber | string | Array<BigNumber | string>
        issuer?: BigNumber | string | Array<BigNumber | string>
        id?: string | Array<string>
      }
    >(this, "ClaimRemoved", eventFilter)
  }
  public OwnershipRenouncedEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>
  }): DeferredEventWrapper<
    { previousOwner: BigNumber | string },
    { previousOwner?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new DeferredEventWrapper<
      { previousOwner: BigNumber | string },
      { previousOwner?: BigNumber | string | Array<BigNumber | string> }
    >(this, "OwnershipRenounced", eventFilter)
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>
    newOwner?: BigNumber | string | Array<BigNumber | string>
  }): DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>
      newOwner?: BigNumber | string | Array<BigNumber | string>
    }
  > {
    return new DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>
        newOwner?: BigNumber | string | Array<BigNumber | string>
      }
    >(this, "OwnershipTransferred", eventFilter)
  }
}
